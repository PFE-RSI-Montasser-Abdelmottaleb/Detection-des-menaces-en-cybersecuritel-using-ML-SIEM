input {
  file {
    path => "/example_logs/testSimulate.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
    mode => "read"
    stat_interval => 1  # Vérifie le fichier chaque seconde
  }
}




filter {
  mutate {
    convert => {
      "duration" => "integer"
      "src_bytes" => "integer"
      "dst_bytes" => "integer"
      "wrong_fragment" => "integer"
      "hot" => "integer"
      "logged_in" => "integer"
      "num_compromised" => "integer"
      "count" => "integer"
      "srv_count" => "integer"
      "serror_rate" => "float"
      "srv_serror_rate" => "float"
      "rerror_rate" => "float"
    }
  }
  http {
  url => "http://flask:5001/predict"  # ✅ Correct

 
    verb => "POST"
    body_format => "json"
    headers => { "Content-Type" => "application/json" }
    body => '{
      "duration": %{[duration]},
      "protocol_type": "%{[protocol_type]}",
      "service": "%{[service]}",
      "flag": "%{[flag]}",
      "src_bytes": %{[src_bytes]},
      "dst_bytes": %{[dst_bytes]},
      "wrong_fragment": %{[wrong_fragment]},
      "hot": %{[hot]},
      "logged_in": %{[logged_in]},
      "num_compromised": %{[num_compromised]},
      "count": %{[count]},
      "srv_count": %{[srv_count]},
      "serror_rate": %{[serror_rate]},
      "srv_serror_rate": %{[srv_serror_rate]},
      "rerror_rate": %{[rerror_rate]}
    }'
    target_body => "prediction_response"
  }

   mutate {
    add_field => { "prediction" => "%{[prediction_response][prediction]}" }
    remove_field => ["prediction_response"]
  }

  mutate {
    remove_field => ["@version", "log", "input", "ecs", "agent", "host"]
  }
  
    mutate {
  convert => { "prediction" => "integer" }
}

}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    data_stream => true
    data_stream_type => "logs"
    data_stream_dataset => "network"
    data_stream_namespace => "prod"
  }
}

