input {
  file {
    path => "/example_logs/testSimulate.json"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    mode => "read"
  }
}

filter {
  # Conversion des types
  mutate {
    convert => {
      "duration"           => "integer"
      "src_bytes"          => "integer"
      "dst_bytes"          => "integer"
      "wrong_fragment"     => "integer"
      "hot"                => "integer"
      "logged_in"          => "integer"
      "num_compromised"    => "integer"
      "count"              => "integer"
      "srv_count"          => "integer"
      "serror_rate"        => "float"
      "srv_serror_rate"    => "float"
      "rerror_rate"        => "float"
    }
  }

  # Appel HTTP + calcul latence dans un filtre Ruby
  ruby {
    code => "
      require 'net/http'
      require 'json'

      start_time = Time.now.to_f

      uri = URI('http://flask:5001/predict')
      http = Net::HTTP.new(uri.host, uri.port)
      request = Net::HTTP::Post.new(uri.path, {'Content-Type' => 'application/json'})

      # Préparer le body JSON à partir des champs
      body = {
        duration: event.get('duration'),
        protocol_type: event.get('protocol_type'),
        service: event.get('service'),
        flag: event.get('flag'),
        src_bytes: event.get('src_bytes'),
        dst_bytes: event.get('dst_bytes'),
        wrong_fragment: event.get('wrong_fragment'),
        hot: event.get('hot'),
        logged_in: event.get('logged_in'),
        num_compromised: event.get('num_compromised'),
        count: event.get('count'),
        srv_count: event.get('srv_count'),
        serror_rate: event.get('serror_rate'),
        srv_serror_rate: event.get('srv_serror_rate'),
        rerror_rate: event.get('rerror_rate')
      }

      request.body = body.to_json

      begin
        response = http.request(request)
        prediction_response = JSON.parse(response.body) rescue {}
      rescue => e
        event.tag('http_request_failed')
        prediction_response = {}
      end

      end_time = Time.now.to_f
      latency_ms = (end_time - start_time) * 1000

      event.set('prediction_response', prediction_response)
      event.set('latency_ms', latency_ms)

      if prediction_response['prediction']
        event.set('prediction', prediction_response['prediction'].to_i)
      end
    "
  }

  # Nettoyage des champs inutiles
  mutate {
    remove_field => ["prediction_response", "@version", "log", "input", "ecs", "agent", "host"]
  }
}

filter {
  date {
    match => ["custom_timestamp", "ISO8601"]
    target => "@timestamp"
  }
}


output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user => "elastic"
    password => "pfe2025"
    data_stream => true
    data_stream_type => "logs"
    data_stream_dataset => "network_version_docker1"
    data_stream_namespace => "prod"
  }
}
